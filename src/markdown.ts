import { IAggregate } from "./types";
import { MermaidErd } from "./mermaid-erd";

export class Markdown {
  private aggregates: IAggregate[];

  constructor(aggregates: IAggregate[]) {
    this.aggregates = aggregates;
  }

  public render(): string {
    let markdown =
      "> Generated by [`typeorm-markdown`](https://github.com/hermin9804/typeorm-markdown)\n\n";

    // Generating the TOC
    markdown += this.aggregates
      .map(
        (aggregate) =>
          `- [${aggregate.namespace}](#${aggregate.namespace.toLowerCase()})`
      )
      .join("\n");
    markdown += "\n\n";

    // Generating the body content
    this.aggregates.forEach((aggregate) => {
      markdown += `## ${aggregate.namespace}\n`;
      const mermaidErd = new MermaidErd(aggregate.tables);
      const erdDiagram = mermaidErd.render();
      markdown += "```mermaid\n" + erdDiagram + "\n```\n\n";

      aggregate.documents.forEach((doc) => {
        markdown += `### ${doc.name}\n`;
        markdown += `${doc.docs.join(" ")}\n\n`;
        markdown += "**Properties**\n";
        doc.properties.forEach((prop) => {
          markdown += `  - \`${prop.name}\`: ${prop.docs.join(" ")}\n`;
        });
        markdown += "\n";
      });
    });

    return markdown;
  }
}
